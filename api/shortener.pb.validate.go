// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/shortener.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on GetUserUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserUrlRequestMultiError, or nil if none found.
func (m *GetUserUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserUrlRequestMultiError(errors)
	}

	return nil
}

// GetUserUrlRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserUrlRequestMultiError) AllErrors() []error { return m }

// GetUserUrlRequestValidationError is the validation error returned by
// GetUserUrlRequest.Validate if the designated constraints aren't met.
type GetUserUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserUrlRequestValidationError) ErrorName() string {
	return "GetUserUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserUrlRequestValidationError{}

// Validate checks the field values on GetUserUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserUrlResponseMultiError, or nil if none found.
func (m *GetUserUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUrls

	// no validation rules for Error

	if len(errors) > 0 {
		return GetUserUrlResponseMultiError(errors)
	}

	return nil
}

// GetUserUrlResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserUrlResponseMultiError) AllErrors() []error { return m }

// GetUserUrlResponseValidationError is the validation error returned by
// GetUserUrlResponse.Validate if the designated constraints aren't met.
type GetUserUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserUrlResponseValidationError) ErrorName() string {
	return "GetUserUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserUrlResponseValidationError{}

// Validate checks the field values on DeleteUrlsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUrlsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUrlsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUrlsRequestMultiError, or nil if none found.
func (m *DeleteUrlsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUrlsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UrlsDelete

	if len(errors) > 0 {
		return DeleteUrlsRequestMultiError(errors)
	}

	return nil
}

// DeleteUrlsRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUrlsRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUrlsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUrlsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUrlsRequestMultiError) AllErrors() []error { return m }

// DeleteUrlsRequestValidationError is the validation error returned by
// DeleteUrlsRequest.Validate if the designated constraints aren't met.
type DeleteUrlsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUrlsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUrlsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUrlsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUrlsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUrlsRequestValidationError) ErrorName() string {
	return "DeleteUrlsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUrlsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUrlsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUrlsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUrlsRequestValidationError{}

// Validate checks the field values on DeleteUrlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUrlsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUrlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUrlsResponseMultiError, or nil if none found.
func (m *DeleteUrlsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUrlsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return DeleteUrlsResponseMultiError(errors)
	}

	return nil
}

// DeleteUrlsResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUrlsResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUrlsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUrlsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUrlsResponseMultiError) AllErrors() []error { return m }

// DeleteUrlsResponseValidationError is the validation error returned by
// DeleteUrlsResponse.Validate if the designated constraints aren't met.
type DeleteUrlsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUrlsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUrlsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUrlsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUrlsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUrlsResponseValidationError) ErrorName() string {
	return "DeleteUrlsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUrlsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUrlsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUrlsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUrlsResponseValidationError{}

// Validate checks the field values on BatchUrlsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatchUrlsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUrlsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchUrlsRequestMultiError, or nil if none found.
func (m *BatchUrlsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUrlsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BatchItems

	// no validation rules for UserId

	if len(errors) > 0 {
		return BatchUrlsRequestMultiError(errors)
	}

	return nil
}

// BatchUrlsRequestMultiError is an error wrapping multiple validation errors
// returned by BatchUrlsRequest.ValidateAll() if the designated constraints
// aren't met.
type BatchUrlsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUrlsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUrlsRequestMultiError) AllErrors() []error { return m }

// BatchUrlsRequestValidationError is the validation error returned by
// BatchUrlsRequest.Validate if the designated constraints aren't met.
type BatchUrlsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUrlsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUrlsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUrlsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUrlsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUrlsRequestValidationError) ErrorName() string { return "BatchUrlsRequestValidationError" }

// Error satisfies the builtin error interface
func (e BatchUrlsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUrlsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUrlsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUrlsRequestValidationError{}

// Validate checks the field values on BatchUrlsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatchUrlsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUrlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchUrlsResponseMultiError, or nil if none found.
func (m *BatchUrlsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUrlsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BatchUrls

	// no validation rules for Error

	if len(errors) > 0 {
		return BatchUrlsResponseMultiError(errors)
	}

	return nil
}

// BatchUrlsResponseMultiError is an error wrapping multiple validation errors
// returned by BatchUrlsResponse.ValidateAll() if the designated constraints
// aren't met.
type BatchUrlsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUrlsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUrlsResponseMultiError) AllErrors() []error { return m }

// BatchUrlsResponseValidationError is the validation error returned by
// BatchUrlsResponse.Validate if the designated constraints aren't met.
type BatchUrlsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUrlsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUrlsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUrlsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUrlsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUrlsResponseValidationError) ErrorName() string {
	return "BatchUrlsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUrlsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUrlsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUrlsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUrlsResponseValidationError{}

// Validate checks the field values on HandleUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HandleUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleUrlRequestMultiError, or nil if none found.
func (m *HandleUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for UserId

	if len(errors) > 0 {
		return HandleUrlRequestMultiError(errors)
	}

	return nil
}

// HandleUrlRequestMultiError is an error wrapping multiple validation errors
// returned by HandleUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type HandleUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleUrlRequestMultiError) AllErrors() []error { return m }

// HandleUrlRequestValidationError is the validation error returned by
// HandleUrlRequest.Validate if the designated constraints aren't met.
type HandleUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleUrlRequestValidationError) ErrorName() string { return "HandleUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e HandleUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleUrlRequestValidationError{}

// Validate checks the field values on HandleUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HandleUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleUrlResponseMultiError, or nil if none found.
func (m *HandleUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrls

	// no validation rules for Error

	if len(errors) > 0 {
		return HandleUrlResponseMultiError(errors)
	}

	return nil
}

// HandleUrlResponseMultiError is an error wrapping multiple validation errors
// returned by HandleUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type HandleUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleUrlResponseMultiError) AllErrors() []error { return m }

// HandleUrlResponseValidationError is the validation error returned by
// HandleUrlResponse.Validate if the designated constraints aren't met.
type HandleUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleUrlResponseValidationError) ErrorName() string {
	return "HandleUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleUrlResponseValidationError{}

// Validate checks the field values on GetUrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlRequestMultiError, or
// nil if none found.
func (m *GetUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUrlRequestMultiError(errors)
	}

	return nil
}

// GetUrlRequestMultiError is an error wrapping multiple validation errors
// returned by GetUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlRequestMultiError) AllErrors() []error { return m }

// GetUrlRequestValidationError is the validation error returned by
// GetUrlRequest.Validate if the designated constraints aren't met.
type GetUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlRequestValidationError) ErrorName() string { return "GetUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlRequestValidationError{}

// Validate checks the field values on GetUrlResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlResponseMultiError,
// or nil if none found.
func (m *GetUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	// no validation rules for Error

	if len(errors) > 0 {
		return GetUrlResponseMultiError(errors)
	}

	return nil
}

// GetUrlResponseMultiError is an error wrapping multiple validation errors
// returned by GetUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlResponseMultiError) AllErrors() []error { return m }

// GetUrlResponseValidationError is the validation error returned by
// GetUrlResponse.Validate if the designated constraints aren't met.
type GetUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlResponseValidationError) ErrorName() string { return "GetUrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlResponseValidationError{}

// Validate checks the field values on SaveShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveShortUrlRequestMultiError, or nil if none found.
func (m *SaveShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Url

	if len(errors) > 0 {
		return SaveShortUrlRequestMultiError(errors)
	}

	return nil
}

// SaveShortUrlRequestMultiError is an error wrapping multiple validation
// errors returned by SaveShortUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveShortUrlRequestMultiError) AllErrors() []error { return m }

// SaveShortUrlRequestValidationError is the validation error returned by
// SaveShortUrlRequest.Validate if the designated constraints aren't met.
type SaveShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveShortUrlRequestValidationError) ErrorName() string {
	return "SaveShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveShortUrlRequestValidationError{}

// Validate checks the field values on SaveShortUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveShortUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveShortUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveShortUrlResponseMultiError, or nil if none found.
func (m *SaveShortUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveShortUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	// no validation rules for Error

	if len(errors) > 0 {
		return SaveShortUrlResponseMultiError(errors)
	}

	return nil
}

// SaveShortUrlResponseMultiError is an error wrapping multiple validation
// errors returned by SaveShortUrlResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveShortUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveShortUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveShortUrlResponseMultiError) AllErrors() []error { return m }

// SaveShortUrlResponseValidationError is the validation error returned by
// SaveShortUrlResponse.Validate if the designated constraints aren't met.
type SaveShortUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveShortUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveShortUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveShortUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveShortUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveShortUrlResponseValidationError) ErrorName() string {
	return "SaveShortUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveShortUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveShortUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveShortUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveShortUrlResponseValidationError{}
